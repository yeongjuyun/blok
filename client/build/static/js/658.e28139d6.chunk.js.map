{"version":3,"file":"static/js/658.e28139d6.chunk.js","mappings":"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","sources":["components/Blocks/Wedding/Map/SettingBlock.tsx","components/Card/Card.tsx"],"sourcesContent":["import { useState } from 'react';\nimport { TextInput, CustomSelect } from '../../../Input';\nimport { Card } from '../../../Card/Card';\nimport { getCurrentStyleOption, getStyleOptions } from '../../blockHelper';\nimport { useSelector, useDispatch } from 'react-redux';\nimport {\n  updateBlockData,\n  selectBlockById,\n  updateTemplate,\n} from '../../../../reducers/SiteReducer';\nimport type { RootState } from '../../../../reducers/store';\nimport * as icon from '../../../../icons';\nimport { SettingBlockProps, StyleData } from '../../blockValidator';\n\nfunction SettingBlock({ blockId, onRemove }: SettingBlockProps) {\n  const { id, template, data, isCardOpened } = useSelector((state: RootState) =>\n    selectBlockById(state, blockId)\n  );\n  const styleOptions = getStyleOptions(template);\n  const currentStyle = getCurrentStyleOption(template);\n  const dispatch = useDispatch();\n\n  //Input\n  const [style, setStyle] = useState(currentStyle);\n  const [header, setHeader] = useState(data.header?.value);\n  const [venue, setVenue] = useState(data.venue?.value);\n  const [address, setAddress] = useState(data.address?.value);\n  const [contact, setContact] = useState(data.contact?.value);\n  const [body, setBody] = useState(data.body?.value);\n\n  return (\n    <>\n      <Card\n        title='Map'\n        onRemove={onRemove}\n        icon={icon.Map}\n        isCardOpened={isCardOpened}\n        blockId={blockId}\n      >\n        <CustomSelect\n          title='스타일'\n          required\n          guideline='스타일를 선택해주세요.'\n          placeholder='원하는 선택지를 선택해주세요'\n          options={styleOptions}\n          onChange={(e: StyleData) => {\n            setStyle(e);\n            dispatch(updateTemplate({ blockId: id, newTemplate: e.value }));\n          }}\n          value={style}\n        />\n        <TextInput\n          title='타이틀'\n          required\n          guideline='헤드라인에 표시될 내용을 입력하세요.'\n          value={header}\n          onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n            setHeader(e.target.value);\n            dispatch(\n              updateBlockData({\n                blockId: id,\n                field: 'header',\n                value: { value: e.target.value },\n              })\n            );\n          }}\n        ></TextInput>\n        <TextInput\n          title='결혼식 장소'\n          required\n          guideline='결혼식 장소를 입력해주세요'\n          value={venue}\n          onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n            setVenue(e.target.value);\n            dispatch(\n              updateBlockData({\n                blockId: id,\n                field: 'venue',\n                value: { value: e.target.value },\n              })\n            );\n          }}\n        />\n        <TextInput\n          title='도로명 주소'\n          required\n          guideline='결혼식 장소를 도로명 주소로 입력해주세요'\n          value={address}\n          onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n            setAddress(e.target.value);\n            dispatch(\n              updateBlockData({\n                blockId: id,\n                field: 'address',\n                value: { value: e.target.value },\n              })\n            );\n          }}\n        />\n        <TextInput\n          title='결혼식장 연락처'\n          required\n          guideline='예식장 연락처를 02-0000-0000 형식으로 입력해주세요'\n          value={contact}\n          onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n            setContact(e.target.value);\n            dispatch(\n              updateBlockData({\n                blockId: id,\n                field: 'contact',\n                value: { value: e.target.value },\n              })\n            );\n          }}\n        />\n        <TextInput\n          title='추가 문구'\n          required={false}\n          guideline='설명에 표시될 내용을 입력하세요'\n          value={body}\n          onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n            setBody(e.target.value);\n            dispatch(\n              updateBlockData({\n                blockId: id,\n                field: 'body',\n                value: { value: e.target.value },\n              })\n            );\n          }}\n        ></TextInput>\n      </Card>\n    </>\n  );\n}\n\nexport default SettingBlock;\n","import styled, { css } from 'styled-components';\nimport * as icon from '../../icons';\nimport React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { toggleCardState } from '../../reducers/SiteReducer';\n\nexport const CardHeader = styled.div<{ isOpened: boolean }>`\n  background: #ffffff;\n  border: 1px solid #efefef;\n  border-radius: ${(props) =>\n    props.isOpened === true ? '12px 12px 0 0' : '12px'};\n  position: relative;\n  width: 100%;\n  height: 60px;\n  display: flex;\n  padding: 0px 24px;\n  box-sizing: border-box;\n  & * {\n    user-select: none;\n    user-drag: none;\n  }\n`;\n\nconst CardContainer = styled.div`\n  width: 100%;\n`;\n\nconst CardBoby = styled.div<{ isOpened: boolean }>`\n  background: #ffffff;\n  border: 1px solid #efefef;\n  border-top: none;\n  padding: 24px;\n  box-sizing: border-box;\n  border-radius: 0 0 12px 12px;\n  div:first-child {\n    margin-top: 0px;\n  }\n`;\n\nconst HeaderIcon = styled.img<{ pinned: boolean }>`\n  width: 22px;\n  height: 22px;\n  margin: auto 0;\n  &:hover {\n    cursor: ${(props) => (props.pinned ? 'not-allowed' : 'grab')};\n  }\n  &:active {\n    cursor: ${(props) => (props.pinned ? 'not-allowed' : 'grabbing')};\n  }\n`;\n\nconst TitleBox = styled.div`\n  font-weight: 600;\n  font-size: 18px;\n  display: flex;\n  margin-left: 20px;\n`;\n\nconst Title = styled.span`\n  margin: auto 0;\n  margin-left: 16px;\n  padding-top: 2px;\n`;\n\nconst TitleIcon = styled.img`\n  width: 24px;\n  height: 24px;\n  margin: auto 0;\n`;\nconst Trash = styled.img`\n  width: 20px;\n  height: 20px;\n  position: absolute;\n  padding: 10px;\n  right: 64px;\n  top: 9px;\n  transition: opacity 0.3s;\n  &:hover {\n    cursor: pointer;\n    opacity: 0.6;\n  }\n`;\nconst Down = styled.img<{ isOpened: boolean }>`\n  width: 20px;\n  height: 20px;\n  position: absolute;\n  padding: 10px;\n  right: 22px;\n  top: 9px;\n  transition: transform 0.4s;\n  &:hover {\n    cursor: pointer;\n  }\n  ${(props) =>\n    props.isOpened &&\n    css`\n      transform: rotate(180deg);\n    `}\n`;\n\ninterface Cardprops {\n  title: string;\n  children: any;\n  pinned?: boolean;\n  icon?: string;\n  onRemove: (event: React.MouseEvent<HTMLElement>) => void;\n  isCardOpened?: boolean;\n  blockId?: string;\n}\n\nexport const Card = (props: Cardprops) => {\n  const dispatch = useDispatch();\n  const isCardOpened = props.isCardOpened ?? false;\n  return (\n    <CardContainer>\n      <CardHeader isOpened={isCardOpened}>\n        <HeaderIcon\n          pinned={props.pinned ? true : false}\n          src={props.pinned ? icon.Pin : icon.Movable}\n          alt=''\n        />\n        <TitleBox>\n          <TitleIcon src={props.icon} alt='' />\n          <Title>{props.title}</Title>\n        </TitleBox>\n        <Trash src={icon.Trash} alt='' onClick={props.onRemove} />\n        <Down\n          src={icon.Down}\n          alt=''\n          isOpened={isCardOpened}\n          onClick={() => {\n            dispatch(toggleCardState(props.blockId ?? ''));\n          }}\n        />\n      </CardHeader>\n      {isCardOpened && (\n        <CardBoby isOpened={isCardOpened}>{props.children}</CardBoby>\n      )}\n    </CardContainer>\n  );\n};\n"],"names":["blockId","onRemove","useSelector","state","selectBlockById","id","template","data","isCardOpened","styleOptions","getStyleOptions","currentStyle","getCurrentStyleOption","dispatch","useDispatch","useState","style","setStyle","header","value","setHeader","venue","setVenue","address","setAddress","contact","setContact","body","setBody","title","icon","required","guideline","placeholder","options","onChange","e","updateTemplate","newTemplate","target","updateBlockData","field","CardHeader","styled","props","isOpened","CardContainer","CardBoby","HeaderIcon","pinned","TitleBox","Title","TitleIcon","Trash","Down","css","Card","src","alt","onClick","toggleCardState","children"],"sourceRoot":""}