{"version":3,"file":"static/js/849.e93eb145.chunk.js","mappings":"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","sources":["components/Blocks/Simple/Feature/SettingBlock.tsx","components/Card/Card.tsx"],"sourcesContent":["import { useState } from 'react';\nimport { TextInput, CustomSelect, ImgInput } from '../../../Input';\nimport { Card } from '../../../Card/Card';\nimport { getCurrentStyleOption, getStyleOptions } from '../../blockHelper';\nimport { useSelector, useDispatch } from 'react-redux';\nimport {\n  updateBlockData,\n  selectBlockById,\n  updateTemplate,\n} from '../../../../reducers/SiteReducer';\nimport type { RootState } from '../../../../reducers/store';\nimport * as icon from '../../../../icons';\nimport { SettingBlockProps, StyleData } from '../../blockValidator';\nimport axios from 'axios';\n\nfunction SettingBlock({ blockId, onRemove }: SettingBlockProps) {\n  const { id, template, data, isCardOpened } = useSelector((state: RootState) =>\n    selectBlockById(state, blockId)\n  );\n  const styleOptions = getStyleOptions(template);\n  const currentStyle = getCurrentStyleOption(template);\n  const dispatch = useDispatch();\n\n  //Input\n  const [navTitle, setNavTitle] = useState(data.navTitle);\n  const [style, setStyle] = useState(currentStyle);\n  const [caption, setCaption] = useState(data.caption?.value);\n  const [header, setHeader] = useState(data.header?.value);\n  const [headerHighlight, setHeaderHighlight] = useState(\n    data.headerHighlight?.value\n  );\n  const [body, setBody] = useState(data.body?.value);\n  const [button, setButton] = useState(data.button);\n  const [image, setImage] = useState(data.image);\n\n  async function imgHandler(data: any) {\n    const formData = new FormData();\n    formData.append('file', data);\n\n    const config = {\n      headers: {\n        'Content-Type': 'multipart/form-data',\n      },\n    };\n    const result = await axios.post('/api/site/image', formData, config);\n    \n    setImage(result.data);\n    dispatch(\n      updateBlockData({\n        blockId: id,\n        field: 'image',\n        value: {\n          src: result.data,\n          alt: result.data,\n        },\n      })\n    );\n  }\n\n  return (\n    <>\n      <Card\n        title=\"Feature\"\n        onRemove={onRemove}\n        icon={icon.Feature}\n        isCardOpened={isCardOpened}\n        blockId={blockId}\n      >\n        <TextInput\n          title=\"메뉴명\"\n          required={false}\n          onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n            setNavTitle(e.target.value);\n            dispatch(\n              updateBlockData({\n                blockId: id,\n                field: 'navTitle',\n                value: e.target.value,\n              })\n            );\n          }}\n          guideline=\"네비게이션 바에 입력될 메뉴명을 입력하세요.\"\n          value={navTitle}\n        ></TextInput>\n        <CustomSelect\n          title=\"스타일\"\n          required\n          guideline=\"스타일를 선택해주세요.\"\n          placeholder=\"원하는 선택지를 선택해주세요\"\n          options={styleOptions}\n          onChange={(e: StyleData) => {\n            setStyle(e);\n            dispatch(updateTemplate({ blockId: id, newTemplate: e.value }));\n          }}\n          value={style}\n        />\n        <ImgInput\n          title=\"이미지\"\n          guideline=\"사이트에 표시할 이미지를 업로드하세요\"\n          src={image?.src}\n          alt={image?.alt}\n          placeholder={image?.src}\n          onChange={imgHandler}\n        />\n        <TextInput\n          title=\"캡션\"\n          required={false}\n          guideline=\"캡션에 표시될 내용을 입력하세요.\"\n          value={caption}\n          onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n            setCaption(e.target.value);\n            dispatch(\n              updateBlockData({\n                blockId: id,\n                field: 'caption',\n                value: { value: e.target.value },\n              })\n            );\n          }}\n        ></TextInput>\n        <TextInput\n          title=\"헤드라인\"\n          required\n          guideline=\"헤드라인에 표시될 내용을 입력하세요.\"\n          value={header}\n          onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n            setHeader(e.target.value);\n            dispatch(\n              updateBlockData({\n                blockId: id,\n                field: 'header',\n                value: { value: e.target.value },\n              })\n            );\n          }}\n        ></TextInput>\n        <TextInput\n          title=\"헤드라인 강조 테스트\"\n          required={false}\n          guideline=\"헤드라인 내용 중에서 강조할 텍스트를 입력하세요\"\n          value={headerHighlight}\n          onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n            setHeaderHighlight(e.target.value);\n            dispatch(\n              updateBlockData({\n                blockId: id,\n                field: 'headerHighlight',\n                value: { value: e.target.value },\n              })\n            );\n          }}\n        ></TextInput>\n        <TextInput\n          title=\"설명\"\n          required={false}\n          guideline=\"설명에 표시될 내용을 입력하세요\"\n          value={body}\n          onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n            setBody(e.target.value);\n            dispatch(\n              updateBlockData({\n                blockId: id,\n                field: 'body',\n                value: { value: e.target.value },\n              })\n            );\n          }}\n        ></TextInput>\n        <TextInput\n          title=\"버튼 텍스트\"\n          required={false}\n          guideline=\"비워둘 경우 버튼이 나타나지 않습니다.\"\n          value={button?.title}\n          onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n            setButton({ ...button, title: e.target.value });\n            dispatch(\n              updateBlockData({\n                blockId: id,\n                field: 'button',\n                value: { ...button, title: e.target.value },\n              })\n            );\n          }}\n        ></TextInput>\n        <TextInput\n          title=\"버튼 URL\"\n          required={false}\n          guideline=\"버튼 클릭시 이동될 url을 입력하세요\"\n          value={button?.url}\n          onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n            setButton({ ...button, url: e.target.value });\n            dispatch(\n              updateBlockData({\n                blockId: id,\n                field: 'button',\n                value: { title: button?.title, url: e.target.value },\n              })\n            );\n          }}\n        ></TextInput>\n      </Card>\n    </>\n  );\n}\n\nexport default SettingBlock;\n","import styled, { css } from 'styled-components';\nimport * as icon from '../../icons';\nimport React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { toggleCardState } from '../../reducers/SiteReducer';\n\nexport const CardHeader = styled.div<{ isOpened: boolean }>`\n  background: #ffffff;\n  border: 1px solid #efefef;\n  border-radius: ${(props) =>\n    props.isOpened === true ? '12px 12px 0 0' : '12px'};\n  position: relative;\n  width: 100%;\n  height: 60px;\n  display: flex;\n  padding: 0px 24px;\n  box-sizing: border-box;\n  & * {\n    user-select: none;\n    user-drag: none;\n  }\n`;\n\nconst CardContainer = styled.div`\n  width: 100%;\n`;\n\nconst CardBoby = styled.div<{ isOpened: boolean }>`\n  background: #ffffff;\n  border: 1px solid #efefef;\n  border-top: none;\n  padding: 24px;\n  box-sizing: border-box;\n  border-radius: 0 0 12px 12px;\n  div:first-child {\n    margin-top: 0px;\n  }\n`;\n\nconst HeaderIcon = styled.img<{ pinned: boolean }>`\n  width: 22px;\n  height: 22px;\n  margin: auto 0;\n  &:hover {\n    cursor: ${(props) => (props.pinned ? 'not-allowed' : 'grab')};\n  }\n  &:active {\n    cursor: ${(props) => (props.pinned ? 'not-allowed' : 'grabbing')};\n  }\n`;\n\nconst TitleBox = styled.div`\n  font-weight: 600;\n  font-size: 18px;\n  display: flex;\n  margin-left: 20px;\n`;\n\nconst Title = styled.span`\n  margin: auto 0;\n  margin-left: 16px;\n  padding-top: 2px;\n`;\n\nconst TitleIcon = styled.img`\n  width: 24px;\n  height: 24px;\n  margin: auto 0;\n`;\nconst Trash = styled.img`\n  width: 20px;\n  height: 20px;\n  position: absolute;\n  padding: 10px;\n  right: 64px;\n  top: 9px;\n  transition: opacity 0.3s;\n  &:hover {\n    cursor: pointer;\n    opacity: 0.6;\n  }\n`;\nconst Down = styled.img<{ isOpened: boolean }>`\n  width: 20px;\n  height: 20px;\n  position: absolute;\n  padding: 10px;\n  right: 22px;\n  top: 9px;\n  transition: transform 0.4s;\n  &:hover {\n    cursor: pointer;\n  }\n  ${(props) =>\n    props.isOpened &&\n    css`\n      transform: rotate(180deg);\n    `}\n`;\n\ninterface Cardprops {\n  title: string;\n  children: any;\n  pinned?: boolean;\n  icon?: string;\n  onRemove: (event: React.MouseEvent<HTMLElement>) => void;\n  isCardOpened?: boolean;\n  blockId?: string;\n}\n\nexport const Card = (props: Cardprops) => {\n  const dispatch = useDispatch();\n  const isCardOpened = props.isCardOpened ?? false;\n  return (\n    <CardContainer>\n      <CardHeader isOpened={isCardOpened}>\n        <HeaderIcon\n          pinned={props.pinned ? true : false}\n          src={props.pinned ? icon.Pin : icon.Movable}\n          alt=''\n        />\n        <TitleBox>\n          <TitleIcon src={props.icon} alt='' />\n          <Title>{props.title}</Title>\n        </TitleBox>\n        <Trash src={icon.Trash} alt='' onClick={props.onRemove} />\n        <Down\n          src={icon.Down}\n          alt=''\n          isOpened={isCardOpened}\n          onClick={() => {\n            dispatch(toggleCardState(props.blockId ?? ''));\n          }}\n        />\n      </CardHeader>\n      {isCardOpened && (\n        <CardBoby isOpened={isCardOpened}>{props.children}</CardBoby>\n      )}\n    </CardContainer>\n  );\n};\n"],"names":["blockId","onRemove","useSelector","state","selectBlockById","id","template","data","isCardOpened","styleOptions","getStyleOptions","currentStyle","getCurrentStyleOption","dispatch","useDispatch","useState","navTitle","setNavTitle","style","setStyle","caption","value","setCaption","header","setHeader","headerHighlight","setHeaderHighlight","body","setBody","button","setButton","image","setImage","formData","FormData","append","config","headers","axios","result","updateBlockData","field","src","alt","title","icon","required","onChange","e","target","guideline","placeholder","options","updateTemplate","newTemplate","url","CardHeader","styled","props","isOpened","CardContainer","CardBoby","HeaderIcon","pinned","TitleBox","Title","TitleIcon","Trash","Down","css","Card","onClick","toggleCardState","children"],"sourceRoot":""}