{"version":3,"file":"static/js/471.d0952c75.chunk.js","mappings":"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","sources":["components/Blocks/Wedding/Calendar/SettingBlock.tsx","components/Card/Card.tsx"],"sourcesContent":["import { useState } from 'react';\nimport { TextInput, CustomSelect } from '../../../Input';\nimport { Card } from '../../../Card/Card';\nimport { getCurrentStyleOption, getStyleOptions } from '../../blockHelper';\nimport {\n  updateBlockData,\n  selectBlockById,\n  updateTemplate,\n} from '../../../../reducers/SiteReducer';\nimport * as icon from '../../../../icons';\nimport { SettingBlockProps, StyleData } from '../../blockValidator';\nimport { useAppDispatch, useAppSelector } from '../../../../reducers';\n\nfunction SettingBlock({ blockId, onRemove }: SettingBlockProps) {\n  const dispatch = useAppDispatch();\n  const { id, template, data, isCardOpened } = useAppSelector((state) =>\n    selectBlockById(state, blockId)\n  );\n  const styleOptions = getStyleOptions(template);\n  const currentStyle = getCurrentStyleOption(template);\n\n  //Input\n  const [style, setStyle] = useState(currentStyle);\n  const [header, setHeader] = useState(data.header?.value);\n  const [body, setBody] = useState(data.body?.value);\n\n  return (\n    <>\n      <Card\n        title='Calendar'\n        onRemove={onRemove}\n        icon={icon.Calendar}\n        isCardOpened={isCardOpened}\n        blockId={blockId}\n      >\n        <CustomSelect\n          title='스타일'\n          required\n          guideline='스타일를 선택해주세요.'\n          placeholder='원하는 선택지를 선택해주세요'\n          options={styleOptions}\n          onChange={(e: StyleData) => {\n            setStyle(e);\n            dispatch(updateTemplate({ blockId: id, newTemplate: e.value }));\n          }}\n          value={style}\n        />\n        <TextInput\n          title='타이틀'\n          required\n          guideline='헤드라인에 표시될 내용을 입력하세요.'\n          value={header}\n          onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n            setHeader(e.target.value);\n            dispatch(\n              updateBlockData({\n                blockId: id,\n                field: 'header',\n                value: { value: e.target.value },\n              })\n            );\n          }}\n        ></TextInput>\n        <TextInput\n          title='추가 문구'\n          required={false}\n          guideline='설명에 표시될 내용을 입력하세요'\n          value={body}\n          onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n            setBody(e.target.value);\n            dispatch(\n              updateBlockData({\n                blockId: id,\n                field: 'body',\n                value: { value: e.target.value },\n              })\n            );\n          }}\n        ></TextInput>\n      </Card>\n    </>\n  );\n}\n\nexport default SettingBlock;\n","import styled, { css } from 'styled-components';\nimport * as icon from '../../icons';\nimport React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { toggleCardState } from '../../reducers/SiteReducer';\n\nexport const CardHeader = styled.div<{ isOpened: boolean }>`\n  background: #ffffff;\n  border: 1px solid #efefef;\n  border-radius: ${(props) =>\n    props.isOpened === true ? '12px 12px 0 0' : '12px'};\n  position: relative;\n  width: 100%;\n  height: 60px;\n  display: flex;\n  padding: 0px 24px;\n  box-sizing: border-box;\n  & * {\n    user-select: none;\n    user-drag: none;\n  }\n`;\n\nconst CardContainer = styled.div`\n  width: 100%;\n`;\n\nconst CardBoby = styled.div<{ isOpened: boolean }>`\n  background: #ffffff;\n  border: 1px solid #efefef;\n  border-top: none;\n  padding: 24px;\n  box-sizing: border-box;\n  border-radius: 0 0 12px 12px;\n  div:first-child {\n    margin-top: 0px;\n  }\n`;\n\nconst HeaderIcon = styled.img<{ pinned: boolean }>`\n  width: 22px;\n  height: 22px;\n  margin: auto 0;\n  &:hover {\n    cursor: ${(props) => (props.pinned ? 'not-allowed' : 'grab')};\n  }\n  &:active {\n    cursor: ${(props) => (props.pinned ? 'not-allowed' : 'grabbing')};\n  }\n`;\n\nconst TitleBox = styled.div`\n  font-weight: 600;\n  font-size: 18px;\n  display: flex;\n  margin-left: 20px;\n`;\n\nconst Title = styled.span`\n  margin: auto 0;\n  margin-left: 16px;\n  padding-top: 2px;\n`;\n\nconst TitleIcon = styled.img`\n  width: 24px;\n  height: 24px;\n  margin: auto 0;\n`;\nconst Trash = styled.img`\n  width: 20px;\n  height: 20px;\n  position: absolute;\n  padding: 10px;\n  right: 64px;\n  top: 9px;\n  transition: opacity 0.3s;\n  &:hover {\n    cursor: pointer;\n    opacity: 0.6;\n  }\n`;\nconst Down = styled.img<{ isOpened: boolean }>`\n  width: 20px;\n  height: 20px;\n  position: absolute;\n  padding: 10px;\n  right: 22px;\n  top: 9px;\n  transition: transform 0.4s;\n  &:hover {\n    cursor: pointer;\n  }\n  ${(props) =>\n    props.isOpened &&\n    css`\n      transform: rotate(180deg);\n    `}\n`;\n\ninterface Cardprops {\n  title: string;\n  children: any;\n  pinned?: boolean;\n  icon?: string;\n  onRemove: (event: React.MouseEvent<HTMLElement>) => void;\n  isCardOpened?: boolean;\n  blockId?: string;\n}\n\nexport const Card = (props: Cardprops) => {\n  const dispatch = useDispatch();\n  const isCardOpened = props.isCardOpened ?? false;\n  return (\n    <CardContainer>\n      <CardHeader isOpened={isCardOpened}>\n        <HeaderIcon\n          pinned={props.pinned ? true : false}\n          src={props.pinned ? icon.Pin : icon.Movable}\n          alt=''\n        />\n        <TitleBox>\n          <TitleIcon src={props.icon} alt='' />\n          <Title>{props.title}</Title>\n        </TitleBox>\n        <Trash src={icon.Trash} alt='' onClick={props.onRemove} />\n        <Down\n          src={icon.Down}\n          alt=''\n          isOpened={isCardOpened}\n          onClick={() => {\n            dispatch(toggleCardState(props.blockId ?? ''));\n          }}\n        />\n      </CardHeader>\n      {isCardOpened && (\n        <CardBoby isOpened={isCardOpened}>{props.children}</CardBoby>\n      )}\n    </CardContainer>\n  );\n};\n"],"names":["blockId","onRemove","dispatch","useAppDispatch","useAppSelector","state","selectBlockById","id","template","data","isCardOpened","styleOptions","getStyleOptions","currentStyle","getCurrentStyleOption","useState","style","setStyle","header","value","setHeader","body","setBody","title","icon","required","guideline","placeholder","options","onChange","e","updateTemplate","newTemplate","target","updateBlockData","field","CardHeader","styled","props","isOpened","CardContainer","CardBoby","HeaderIcon","pinned","TitleBox","Title","TitleIcon","Trash","Down","css","Card","useDispatch","src","alt","onClick","toggleCardState","children"],"sourceRoot":""}