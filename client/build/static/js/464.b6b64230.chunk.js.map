{"version":3,"file":"static/js/464.b6b64230.chunk.js","mappings":"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","sources":["components/Blocks/Wedding/Money/SettingBlock.tsx","components/Card/Card.tsx"],"sourcesContent":["import { useState } from 'react';\nimport { TextInput, CustomSelect } from '../../../Input';\nimport { Card } from '../../../Card/Card';\nimport { getCurrentStyleOption, getStyleOptions } from '../../blockHelper';\nimport { useSelector, useDispatch } from 'react-redux';\nimport {\n  updateBlockData,\n  selectBlockById,\n  updateTemplate,\n} from '../../../../reducers/SiteReducer';\nimport type { RootState } from '../../../../reducers/store';\nimport * as icon from '../../../../icons';\nimport { SettingBlockProps, StyleData } from '../../blockValidator';\nimport styled from 'styled-components';\n\nconst AccountInput = styled(TextInput)`\n  margin-top: 0;\n`;\n\nfunction SettingBlock({ blockId, onRemove }: SettingBlockProps) {\n  const { id, template, data, isCardOpened } = useSelector((state: RootState) =>\n    selectBlockById(state, blockId)\n  );\n  const styleOptions = getStyleOptions(template);\n  const currentStyle = getCurrentStyleOption(template);\n  const dispatch = useDispatch();\n\n  //Input\n  const [style, setStyle] = useState(currentStyle);\n  const [header, setHeader] = useState(data.header?.value);\n  const [groom, setGroom] = useState(data.groom?.value);\n  const [bride, setBride] = useState(data.bride?.value);\n  const [groomAccount, setGroomAccount] = useState(data.groomAccount?.value);\n  const [brideAccount, setBrideAccount] = useState(data.brideAccount?.value);\n  const [body, setBody] = useState(data.body?.value);\n\n  return (\n    <>\n      <Card\n        title='Money'\n        onRemove={onRemove}\n        icon={icon.Money}\n        isCardOpened={isCardOpened}\n        blockId={blockId}\n      >\n        <CustomSelect\n          title='스타일'\n          required\n          guideline='스타일를 선택해주세요.'\n          placeholder='원하는 선택지를 선택해주세요'\n          options={styleOptions}\n          onChange={(e: StyleData) => {\n            setStyle(e);\n            dispatch(updateTemplate({ blockId: id, newTemplate: e.value }));\n          }}\n          value={style}\n        />\n        <TextInput\n          title='타이틀'\n          required\n          guideline='헤드라인에 표시될 내용을 입력하세요.'\n          value={header}\n          onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n            setHeader(e.target.value);\n            dispatch(\n              updateBlockData({\n                blockId: id,\n                field: 'header',\n                value: { value: e.target.value },\n              })\n            );\n          }}\n        ></TextInput>\n        <TextInput\n          title='신랑 측 계좌정보'\n          required\n          guideline='신랑 측 예금주를 입력해주세요'\n          value={groom}\n          onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n            setGroom(e.target.value);\n            dispatch(\n              updateBlockData({\n                blockId: id,\n                field: 'groom',\n                value: { value: e.target.value },\n              })\n            );\n          }}\n        />\n        <AccountInput\n          required\n          guideline='은행과 계좌번호를 입력해주세요'\n          value={groomAccount}\n          onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n            setGroomAccount(e.target.value);\n            dispatch(\n              updateBlockData({\n                blockId: id,\n                field: 'groomAccount',\n                value: { value: e.target.value },\n              })\n            );\n          }}\n        />\n        <TextInput\n          title='신부 측 계좌정보'\n          required\n          guideline='신부 측 예금주를 입력해주세요'\n          value={bride}\n          onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n            setBride(e.target.value);\n            dispatch(\n              updateBlockData({\n                blockId: id,\n                field: 'bride',\n                value: { value: e.target.value },\n              })\n            );\n          }}\n        />\n        <AccountInput\n          required\n          guideline='은행과 계좌번호를 입력해주세요'\n          value={brideAccount}\n          onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n            setBrideAccount(e.target.value);\n            dispatch(\n              updateBlockData({\n                blockId: id,\n                field: 'brideAccount',\n                value: { value: e.target.value },\n              })\n            );\n          }}\n        />\n        <TextInput\n          title='추가 문구'\n          required={false}\n          guideline='설명에 표시될 내용을 입력하세요'\n          value={body}\n          onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n            setBody(e.target.value);\n            dispatch(\n              updateBlockData({\n                blockId: id,\n                field: 'body',\n                value: { value: e.target.value },\n              })\n            );\n          }}\n        ></TextInput>\n      </Card>\n    </>\n  );\n}\n\nexport default SettingBlock;\n","import styled, { css } from 'styled-components';\nimport * as icon from '../../icons';\nimport React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { toggleCardState } from '../../reducers/SiteReducer';\n\nexport const CardHeader = styled.div<{ isOpened: boolean }>`\n  background: #ffffff;\n  border: 1px solid #efefef;\n  border-radius: ${(props) =>\n    props.isOpened === true ? '12px 12px 0 0' : '12px'};\n  position: relative;\n  width: 100%;\n  height: 60px;\n  display: flex;\n  padding: 0px 24px;\n  box-sizing: border-box;\n  & * {\n    user-select: none;\n    user-drag: none;\n  }\n`;\n\nconst CardContainer = styled.div`\n  width: 100%;\n`;\n\nconst CardBoby = styled.div<{ isOpened: boolean }>`\n  background: #ffffff;\n  border: 1px solid #efefef;\n  border-top: none;\n  padding: 24px;\n  box-sizing: border-box;\n  border-radius: 0 0 12px 12px;\n  div:first-child {\n    margin-top: 0px;\n  }\n`;\n\nconst HeaderIcon = styled.img<{ pinned: boolean }>`\n  width: 22px;\n  height: 22px;\n  margin: auto 0;\n  &:hover {\n    cursor: ${(props) => (props.pinned ? 'not-allowed' : 'grab')};\n  }\n  &:active {\n    cursor: ${(props) => (props.pinned ? 'not-allowed' : 'grabbing')};\n  }\n`;\n\nconst TitleBox = styled.div`\n  font-weight: 600;\n  font-size: 18px;\n  display: flex;\n  margin-left: 20px;\n`;\n\nconst Title = styled.span`\n  margin: auto 0;\n  margin-left: 16px;\n  padding-top: 2px;\n`;\n\nconst TitleIcon = styled.img`\n  width: 24px;\n  height: 24px;\n  margin: auto 0;\n`;\nconst Trash = styled.img`\n  width: 20px;\n  height: 20px;\n  position: absolute;\n  padding: 10px;\n  right: 64px;\n  top: 9px;\n  transition: opacity 0.3s;\n  &:hover {\n    cursor: pointer;\n    opacity: 0.6;\n  }\n`;\nconst Down = styled.img<{ isOpened: boolean }>`\n  width: 20px;\n  height: 20px;\n  position: absolute;\n  padding: 10px;\n  right: 22px;\n  top: 9px;\n  transition: transform 0.4s;\n  &:hover {\n    cursor: pointer;\n  }\n  ${(props) =>\n    props.isOpened &&\n    css`\n      transform: rotate(180deg);\n    `}\n`;\n\ninterface Cardprops {\n  title: string;\n  children: any;\n  pinned?: boolean;\n  icon?: string;\n  onRemove: (event: React.MouseEvent<HTMLElement>) => void;\n  isCardOpened?: boolean;\n  blockId?: string;\n}\n\nexport const Card = (props: Cardprops) => {\n  const dispatch = useDispatch();\n  const isCardOpened = props.isCardOpened ?? false;\n  return (\n    <CardContainer>\n      <CardHeader isOpened={isCardOpened}>\n        <HeaderIcon\n          pinned={props.pinned ? true : false}\n          src={props.pinned ? icon.Pin : icon.Movable}\n          alt=''\n        />\n        <TitleBox>\n          <TitleIcon src={props.icon} alt='' />\n          <Title>{props.title}</Title>\n        </TitleBox>\n        <Trash src={icon.Trash} alt='' onClick={props.onRemove} />\n        <Down\n          src={icon.Down}\n          alt=''\n          isOpened={isCardOpened}\n          onClick={() => {\n            dispatch(toggleCardState(props.blockId ?? ''));\n          }}\n        />\n      </CardHeader>\n      {isCardOpened && (\n        <CardBoby isOpened={isCardOpened}>{props.children}</CardBoby>\n      )}\n    </CardContainer>\n  );\n};\n"],"names":["AccountInput","styled","TextInput","blockId","onRemove","useSelector","state","selectBlockById","id","template","data","isCardOpened","styleOptions","getStyleOptions","currentStyle","getCurrentStyleOption","dispatch","useDispatch","useState","style","setStyle","header","value","setHeader","groom","setGroom","bride","setBride","groomAccount","setGroomAccount","brideAccount","setBrideAccount","body","setBody","title","icon","required","guideline","placeholder","options","onChange","e","updateTemplate","newTemplate","target","updateBlockData","field","CardHeader","props","isOpened","CardContainer","CardBoby","HeaderIcon","pinned","TitleBox","Title","TitleIcon","Trash","Down","css","Card","src","alt","onClick","toggleCardState","children"],"sourceRoot":""}