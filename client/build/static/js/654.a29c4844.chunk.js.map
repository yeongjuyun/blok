{"version":3,"file":"static/js/654.a29c4844.chunk.js","mappings":"sPAoQA,UArPA,YAAiE,IAAD,cAAxCA,EAAwC,EAAxCA,QAASC,EAA+B,EAA/BA,SAC/B,GAA6CC,EAAAA,EAAAA,KAAY,SAACC,GAAD,OACvDC,EAAAA,EAAAA,IAAgBD,EAAOH,MADjBK,EAAR,EAAQA,GAAIC,EAAZ,EAAYA,SAAUC,EAAtB,EAAsBA,KAAMC,EAA5B,EAA4BA,aAGtBC,GAAeC,EAAAA,EAAAA,IAAgBJ,GAC/BK,GAAeC,EAAAA,EAAAA,IAAsBN,GACrCO,GAAWC,EAAAA,EAAAA,MAEjB,GAA0BC,EAAAA,EAAAA,UAASJ,GAAnC,eAAOK,EAAP,KAAcC,EAAd,KACA,GAA0BF,EAAAA,EAAAA,UAAQ,UAACR,EAAKW,aAAN,aAAC,EAAYC,OAA/C,eAAOD,EAAP,KAAcE,EAAd,KACA,GAA4BL,EAAAA,EAAAA,UAAS,IAArC,eAAOM,EAAP,KAAeC,EAAf,KACA,GAAsBP,EAAAA,EAAAA,UAAQ,UAACR,EAAKgB,eAAN,aAAC,EAAcJ,OAA7C,eAAOK,EAAP,KAAYC,EAAZ,KACA,GAAwCV,EAAAA,EAAAA,UAAQ,UAACR,EAAKmB,gBAAN,aAAC,EAAeP,OAAhE,eAAOQ,EAAP,KAAqBC,EAArB,KACA,GAAwBb,EAAAA,EAAAA,UAAQ,UAACR,EAAKsB,eAAN,aAAC,EAAcV,OAA/C,gBAAOW,GAAP,MAAaC,GAAb,MACA,IAAwBhB,EAAAA,EAAAA,UAAQ,UAACR,EAAKyB,iBAAN,aAAC,EAAgBb,OAAjD,iBAAOc,GAAP,MAAaC,GAAb,MACA,IAAwBnB,EAAAA,EAAAA,UAAQ,UAACR,EAAK4B,YAAN,aAAC,EAAWhB,OAA5C,iBAAOgB,GAAP,MAAaC,GAAb,MACA,IAAoCrB,EAAAA,EAAAA,UAAQ,UAACR,EAAK8B,cAAN,aAAC,EAAaC,KAA1D,iBAAOC,GAAP,MAAmBC,GAAnB,MACA,IAAgCzB,EAAAA,EAAAA,UAASR,EAAKkC,UAA9C,iBAAOA,GAAP,MAAiBC,GAAjB,MACMC,GAAQC,EAAAA,GAAAA,IAAH,yQAWLC,GAAQD,EAAAA,GAAAA,KAAH,8HAOLE,GAAMF,EAAAA,GAAAA,IAAH,6HA0CT,OATAG,EAAAA,EAAAA,YAAU,WACRlC,GACEmC,EAAAA,EAAAA,IAAgB,CACdhD,QAASK,EACT4C,MAAO,UACP9B,MAAO,CAAEA,MAAOK,QAGnB,CAACA,EAAKX,EAAUR,KAEjB,+BACE,UAAC,IAAD,CACEa,MAAM,UACNjB,SAAUA,EACViD,KAAMC,EAAAA,GACN3C,aAAcA,EACdR,QAASA,EALX,WAOE,SAAC,KAAD,CACEkB,MAAM,qBACNkC,UAAU,EACVC,SAAU,SAACC,GACTZ,GAAYY,EAAEC,OAAOpC,OACrBN,GACEmC,EAAAA,EAAAA,IAAgB,CACdhD,QAASK,EACT4C,MAAO,WACP9B,MAAOmC,EAAEC,OAAOpC,UAItBqC,UAAU,0HACVrC,MAAOsB,MAET,SAAC,KAAD,CACEvB,MAAM,qBACNkC,UAAU,EACVI,UAAU,iEACVC,YAAY,mFACZC,QAASjD,EACT4C,SAAU,SAACC,GACTrC,EAASqC,GACTzC,GAAS8C,EAAAA,EAAAA,IAAe,CAAE3D,QAASK,EAAIuD,YAAaN,EAAEnC,UAExDA,MAAOH,KAET,SAAC,KAAD,CACEE,MAAM,qBACNkC,UAAU,EACVI,UAAU,gEACVrC,MAAOD,EACPmC,SAAU,SAACC,GACTlC,EAASkC,EAAEC,OAAOpC,OAClBN,GACEmC,EAAAA,EAAAA,IAAgB,CACdhD,QAASK,EACT4C,MAAO,QACP9B,MAAO,CAAEA,MAAOmC,EAAEC,OAAOpC,cAKjC,SAAC,KAAD,CACED,MAAM,wCACNkC,UAAU,EACVI,UAAU,gEACVrC,MAAOQ,EACP0B,SAAU,SAACC,GACT1B,EAAgB0B,EAAEC,OAAOpC,OACzBN,GACEmC,EAAAA,EAAAA,IAAgB,CACdhD,QAASK,EACT4C,MAAO,WACP9B,MAAO,CAAEA,MAAOmC,EAAEC,OAAOpC,cAKjC,SAAC,KAAD,CACED,MAAM,4BACNkC,UAAU,EACVI,UAAU,gEACVrC,MAAOc,GACPoB,SAAU,SAACC,GACTpB,GAAQoB,EAAEC,OAAOpC,OACjBN,GACEmC,EAAAA,EAAAA,IAAgB,CACdhD,QAASK,EACT4C,MAAO,YACP9B,MAAO,CAAEA,MAAOmC,EAAEC,OAAOpC,cAKjC,SAAC,KAAD,CACED,MAAM,eACNkC,UAAU,EACVI,UAAU,gEACVrC,MAAOW,GACPuB,SAAU,SAACC,GACTvB,GAAQuB,EAAEC,OAAOpC,OACjBN,GACEmC,EAAAA,EAAAA,IAAgB,CACdhD,QAASK,EACT4C,MAAO,UACP9B,MAAO,CAAEA,MAAOmC,EAAEC,OAAOpC,cAKjC,SAAC,IAAD,CACED,MAAM,4BACNkC,UAAQ,EACRI,UAAU,uEAEVrC,MAAOE,EACPgC,SAAU,SAACC,GACThC,EAAUgC,EAAEC,OAAOpC,QAErB0C,QAAS,SAACP,GACRA,EAAEQ,iBAEFrC,GAAO,SAACsC,GACN,GAAKA,EAGL,MAAM,GAAN,eAAWA,GAAX,CAAgB1C,OAElBC,GAAU,iBAAM,MAChBT,GACEmC,EAAAA,EAAAA,IAAgB,CACdhD,QAASK,EACT4C,MAAO,UACP9B,MAAO,CAAEA,MAAOK,OAItBA,KAAK,SAACqB,GAAD,UAnKE,SAACtC,GACd,IAAMiB,EAAM,GACZ,GAAKjB,EAAL,CAGA,IALkD,eAKzCyD,GACPxC,EAAIyC,MACF,UAACtB,GAAD,WACGpC,EAAKyD,IACN,SAAClB,GAAD,CACEoB,IAAKf,EAAAA,EACLU,QAAS,WACPpC,GAAO,SAACsC,GACN,GAAKA,EAAL,CAGA,IAAMI,EAASJ,EAAIK,QAAO,SAACC,EAAOC,GAAR,OAAkBA,IAAUN,KACtD,OAAO,OAAIG,YAVnB,UAAe5D,EAAf,YAAuByD,MAFlBA,EAAI,EAAGA,EAAIzD,EAAKgE,OAAQP,IAAM,EAA9BA,GAmBT,OAAOxC,GA2IYgD,CAAOhD,MAvBf,aAyBP,SAAC,KAAD,CACEN,MAAM,wCACNkC,UAAU,EACVI,UAAU,gEACVrC,MAAOgB,GACPkB,SAAU,SAACC,GACTlB,GAAQkB,EAAEC,OAAOpC,OACjBN,GACEmC,EAAAA,EAAAA,IAAgB,CACdhD,QAASK,EACT4C,MAAO,OACP9B,MAAO,CAAEA,MAAOmC,EAAEC,OAAOpC,cAKjC,SAAC,KAAD,CACED,MAAM,+BACNkC,UAAU,EACVI,UAAU,gEACVrC,MAAOoB,GACPc,SAAU,SAACC,GACTd,GAAcc,EAAEC,OAAOpC,OACvBN,GACEmC,EAAAA,EAAAA,IAAgB,CACdhD,QAASK,EACT4C,MAAO,SACP9B,MAAO,CAAEmB,IAAKgB,EAAEC,OAAOpC,oB,kJCpP1BsD,EAAa7B,EAAAA,GAAAA,IAAH,4RAGJ,SAAC8B,GAAD,OACI,IAAnBA,EAAMC,SAAoB,gBAAkB,UAa1CC,EAAgBhC,EAAAA,GAAAA,IAAH,wCAIbiC,EAAWjC,EAAAA,GAAAA,IAAH,iOAYRkC,EAAalC,EAAAA,GAAAA,IAAH,qJAKF,SAAC8B,GAAD,OAAYA,EAAMK,OAAS,cAAgB,UAG3C,SAACL,GAAD,OAAYA,EAAMK,OAAS,cAAgB,cAInDC,EAAWpC,EAAAA,GAAAA,IAAH,yGAORqC,EAAQrC,EAAAA,GAAAA,KAAH,sFAMLsC,EAAYtC,EAAAA,GAAAA,IAAH,4EAKTuC,EAAQvC,EAAAA,GAAAA,IAAH,uNAaLwC,EAAOxC,EAAAA,GAAAA,IAAH,6MAWN,SAAC8B,GAAD,OACAA,EAAMC,WACNU,EAAAA,EAAAA,IADA,iEAgBSC,EAAO,SAACZ,GAAsB,IAAD,EAClC7D,GAAWC,EAAAA,EAAAA,MACXN,EAAY,UAAGkE,EAAMlE,oBAAT,SAClB,OACE,UAACoE,EAAD,YACE,UAACH,EAAD,CAAYE,SAAUnE,EAAtB,WACE,SAACsE,EAAD,CACEC,SAAQL,EAAMK,OACdb,IAAKQ,EAAMK,OAAS7B,EAAAA,GAAWA,EAAAA,GAC/BqC,IAAI,MAEN,UAACP,EAAD,YACE,SAACE,EAAD,CAAWhB,IAAKQ,EAAMxB,KAAMqC,IAAI,MAChC,SAACN,EAAD,UAAQP,EAAMxD,YAEhB,SAACiE,EAAD,CAAOjB,IAAKhB,EAAAA,GAAYqC,IAAI,GAAG1B,QAASa,EAAMzE,YAC9C,SAACmF,EAAD,CACElB,IAAKhB,EAAAA,GACLqC,IAAI,GACJZ,SAAUnE,EACVqD,QAAS,WAAO,IAAD,EACbhD,GAAS2E,EAAAA,EAAAA,IAAe,UAACd,EAAM1E,eAAP,QAAkB,WAI/CQ,IACC,SAACqE,EAAD,CAAUF,SAAUnE,EAApB,SAAmCkE,EAAMe","sources":["components/Blocks/Resume/Project/SettingBlock.tsx","components/Card/Card.tsx"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport { TextInput, CustomSelect, ArrInput } from '../../../Input';\nimport { Card } from '../../../Card/Card';\nimport { getStyleOptions, getCurrentStyleOption } from '../../blockHelper';\nimport { useSelector, useDispatch } from 'react-redux';\nimport {\n  updateBlockData,\n  selectBlockById,\n  updateTemplate,\n} from '../../../../reducers/SiteReducer';\nimport type { RootState } from '../../../../reducers/store';\nimport { SettingBlockProps, StyleData } from '../../blockValidator';\nimport styled from 'styled-components';\nimport * as icons from '../../../../icons';\n\nfunction SettingBlock({ blockId, onRemove }: SettingBlockProps) {\n  const { id, template, data, isCardOpened } = useSelector((state: RootState) =>\n    selectBlockById(state, blockId)\n  );\n  const styleOptions = getStyleOptions(template);\n  const currentStyle = getCurrentStyleOption(template);\n  const dispatch = useDispatch();\n\n  const [style, setStyle] = useState(currentStyle);\n  const [title, setTitle] = useState(data.title?.value);\n  const [intros, setIntros] = useState('');\n  const [arr, setArr] = useState(data.arrText?.value);\n  const [projectTitle, setProjectTitle] = useState(data.leftText?.value);\n  const [term, setTerm] = useState(data.caption?.value);\n  const [role, setRole] = useState(data.rightText?.value);\n  const [body, setbody] = useState(data.body?.value);\n  const [projectUrl, setProjectUrl] = useState(data.button?.url);\n  const [navTitle, setNavTitle] = useState(data.navTitle);\n  const Skill = styled.div`\n    box-sizing: border-box;\n    padding: 5px 8px;\n    background-color: #f0f1f3;\n    margin: 0 4px;\n    border-radius: 10px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    margin-top: 5px !important;\n  `;\n  const Intro = styled.span`\n    font-size: 1rem;\n    color: black;\n    width: 80%;\n    display: flex;\n    flex-wrap: wrap;\n  `;\n  const Del = styled.img`\n    width: 8px;\n    height: 8px;\n    padding: 3px;\n    margin-left: 2px;\n    cursor: pointer;\n  `;\n  const skills = (data: Array<string> | undefined) => {\n    const arr = [];\n    if (!data) {\n      return;\n    }\n    for (let i = 0; i < data.length; i++) {\n      arr.push(\n        <Skill key={`${data}-${i}`}>\n          {data[i]}\n          <Del\n            src={icons.x}\n            onClick={() => {\n              setArr((res) => {\n                if (!res) {\n                  return;\n                }\n                const Newarr = res.filter((vlaue, index) => index !== i);\n                return [...Newarr];\n              });\n            }}\n          />\n        </Skill>\n      );\n    }\n    return arr;\n  };\n  useEffect(() => {\n    dispatch(\n      updateBlockData({\n        blockId: id,\n        field: 'arrText',\n        value: { value: arr },\n      })\n    );\n  }, [arr, dispatch, id]);\n  return (\n    <>\n      <Card\n        title='Project'\n        onRemove={onRemove}\n        icon={icons.Project}\n        isCardOpened={isCardOpened}\n        blockId={blockId}\n      >\n        <TextInput\n          title='메뉴명'\n          required={false}\n          onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n            setNavTitle(e.target.value);\n            dispatch(\n              updateBlockData({\n                blockId: id,\n                field: 'navTitle',\n                value: e.target.value,\n              })\n            );\n          }}\n          guideline='네비게이션 바에 입력될 메뉴명을 입력하세요.'\n          value={navTitle}\n        ></TextInput>\n        <CustomSelect\n          title='스타일'\n          required={true}\n          guideline='스타일를 선택해주세요.'\n          placeholder='원하는 선택지를 선택해주세요'\n          options={styleOptions}\n          onChange={(e: StyleData) => {\n            setStyle(e);\n            dispatch(updateTemplate({ blockId: id, newTemplate: e.value }));\n          }}\n          value={style}\n        />\n        <TextInput\n          title='타이틀'\n          required={true}\n          guideline='텍스트를 입력해주세요'\n          value={title}\n          onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n            setTitle(e.target.value);\n            dispatch(\n              updateBlockData({\n                blockId: id,\n                field: 'title',\n                value: { value: e.target.value },\n              })\n            );\n          }}\n        ></TextInput>\n        <TextInput\n          title='프로젝트 제목'\n          required={true}\n          guideline='텍스트를 입력해주세요'\n          value={projectTitle}\n          onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n            setProjectTitle(e.target.value);\n            dispatch(\n              updateBlockData({\n                blockId: id,\n                field: 'leftText',\n                value: { value: e.target.value },\n              })\n            );\n          }}\n        ></TextInput>\n        <TextInput\n          title='담당 업무'\n          required={true}\n          guideline='텍스트를 입력해주세요'\n          value={role}\n          onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n            setRole(e.target.value);\n            dispatch(\n              updateBlockData({\n                blockId: id,\n                field: 'rightText',\n                value: { value: e.target.value },\n              })\n            );\n          }}\n        ></TextInput>\n        <TextInput\n          title='기간'\n          required={true}\n          guideline='텍스트를 입력해주세요'\n          value={term}\n          onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n            setTerm(e.target.value);\n            dispatch(\n              updateBlockData({\n                blockId: id,\n                field: 'caption',\n                value: { value: e.target.value },\n              })\n            );\n          }}\n        ></TextInput>\n        <ArrInput\n          title='적용 기술'\n          required\n          guideline='기술 스택을 입력해주세요'\n          key={'skillset'}\n          value={intros}\n          onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n            setIntros(e.target.value);\n          }}\n          onClick={(e: React.MouseEvent<HTMLButtonElement>) => {\n            e.preventDefault();\n\n            setArr((res) => {\n              if (!res) {\n                return;\n              }\n              return [...res, intros];\n            });\n            setIntros(() => '');\n            dispatch(\n              updateBlockData({\n                blockId: id,\n                field: 'arrText',\n                value: { value: arr },\n              })\n            );\n          }}\n          arr={<Intro>{skills(arr)}</Intro>}\n        ></ArrInput>\n        <TextInput\n          title='프로젝트 소개'\n          required={true}\n          guideline='텍스트를 입력해주세요'\n          value={body}\n          onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n            setbody(e.target.value);\n            dispatch(\n              updateBlockData({\n                blockId: id,\n                field: 'body',\n                value: { value: e.target.value },\n              })\n            );\n          }}\n        ></TextInput>\n        <TextInput\n          title='프로젝트 url'\n          required={true}\n          guideline='텍스트를 입력해주세요'\n          value={projectUrl}\n          onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n            setProjectUrl(e.target.value);\n            dispatch(\n              updateBlockData({\n                blockId: id,\n                field: 'button',\n                value: { url: e.target.value },\n              })\n            );\n          }}\n        ></TextInput>\n      </Card>\n    </>\n  );\n}\n\nexport default SettingBlock;\n","import styled, { css } from 'styled-components';\nimport * as icon from '../../icons';\nimport React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { toggleCardState } from '../../reducers/SiteReducer';\n\nexport const CardHeader = styled.div<{ isOpened: boolean }>`\n  background: #ffffff;\n  border: 1px solid #efefef;\n  border-radius: ${(props) =>\n    props.isOpened === true ? '12px 12px 0 0' : '12px'};\n  position: relative;\n  width: 100%;\n  height: 60px;\n  display: flex;\n  padding: 0px 24px;\n  box-sizing: border-box;\n  & * {\n    user-select: none;\n    user-drag: none;\n  }\n`;\n\nconst CardContainer = styled.div`\n  width: 100%;\n`;\n\nconst CardBoby = styled.div<{ isOpened: boolean }>`\n  background: #ffffff;\n  border: 1px solid #efefef;\n  border-top: none;\n  padding: 24px;\n  box-sizing: border-box;\n  border-radius: 0 0 12px 12px;\n  div:first-child {\n    margin-top: 0px;\n  }\n`;\n\nconst HeaderIcon = styled.img<{ pinned: boolean }>`\n  width: 22px;\n  height: 22px;\n  margin: auto 0;\n  &:hover {\n    cursor: ${(props) => (props.pinned ? 'not-allowed' : 'grab')};\n  }\n  &:active {\n    cursor: ${(props) => (props.pinned ? 'not-allowed' : 'grabbing')};\n  }\n`;\n\nconst TitleBox = styled.div`\n  font-weight: 600;\n  font-size: 18px;\n  display: flex;\n  margin-left: 20px;\n`;\n\nconst Title = styled.span`\n  margin: auto 0;\n  margin-left: 16px;\n  padding-top: 2px;\n`;\n\nconst TitleIcon = styled.img`\n  width: 24px;\n  height: 24px;\n  margin: auto 0;\n`;\nconst Trash = styled.img`\n  width: 20px;\n  height: 20px;\n  position: absolute;\n  padding: 10px;\n  right: 64px;\n  top: 9px;\n  transition: opacity 0.3s;\n  &:hover {\n    cursor: pointer;\n    opacity: 0.6;\n  }\n`;\nconst Down = styled.img<{ isOpened: boolean }>`\n  width: 20px;\n  height: 20px;\n  position: absolute;\n  padding: 10px;\n  right: 22px;\n  top: 9px;\n  transition: transform 0.4s;\n  &:hover {\n    cursor: pointer;\n  }\n  ${(props) =>\n    props.isOpened &&\n    css`\n      transform: rotate(180deg);\n    `}\n`;\n\ninterface Cardprops {\n  title: string;\n  children: any;\n  pinned?: boolean;\n  icon?: string;\n  onRemove: (event: React.MouseEvent<HTMLElement>) => void;\n  isCardOpened?: boolean;\n  blockId?: string;\n}\n\nexport const Card = (props: Cardprops) => {\n  const dispatch = useDispatch();\n  const isCardOpened = props.isCardOpened ?? false;\n  return (\n    <CardContainer>\n      <CardHeader isOpened={isCardOpened}>\n        <HeaderIcon\n          pinned={props.pinned ? true : false}\n          src={props.pinned ? icon.Pin : icon.Movable}\n          alt=''\n        />\n        <TitleBox>\n          <TitleIcon src={props.icon} alt='' />\n          <Title>{props.title}</Title>\n        </TitleBox>\n        <Trash src={icon.Trash} alt='' onClick={props.onRemove} />\n        <Down\n          src={icon.Down}\n          alt=''\n          isOpened={isCardOpened}\n          onClick={() => {\n            dispatch(toggleCardState(props.blockId ?? ''));\n          }}\n        />\n      </CardHeader>\n      {isCardOpened && (\n        <CardBoby isOpened={isCardOpened}>{props.children}</CardBoby>\n      )}\n    </CardContainer>\n  );\n};\n"],"names":["blockId","onRemove","useSelector","state","selectBlockById","id","template","data","isCardOpened","styleOptions","getStyleOptions","currentStyle","getCurrentStyleOption","dispatch","useDispatch","useState","style","setStyle","title","value","setTitle","intros","setIntros","arrText","arr","setArr","leftText","projectTitle","setProjectTitle","caption","term","setTerm","rightText","role","setRole","body","setbody","button","url","projectUrl","setProjectUrl","navTitle","setNavTitle","Skill","styled","Intro","Del","useEffect","updateBlockData","field","icon","icons","required","onChange","e","target","guideline","placeholder","options","updateTemplate","newTemplate","onClick","preventDefault","res","i","push","src","Newarr","filter","vlaue","index","length","skills","CardHeader","props","isOpened","CardContainer","CardBoby","HeaderIcon","pinned","TitleBox","Title","TitleIcon","Trash","Down","css","Card","alt","toggleCardState","children"],"sourceRoot":""}