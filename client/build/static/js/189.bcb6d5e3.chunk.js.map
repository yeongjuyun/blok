{"version":3,"file":"static/js/189.bcb6d5e3.chunk.js","mappings":"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","sources":["components/Blocks/Simple/Hero/SettingBlock.tsx","components/Card/Card.tsx"],"sourcesContent":["import { useState } from 'react';\nimport { TextInput, CustomSelect } from '../../../Input';\nimport { Card } from '../../../Card/Card';\nimport * as icon from '../../../../icons';\nimport { getStyleOptions, getCurrentStyleOption } from '../../blockHelper';\nimport { useAppSelector, useAppDispatch } from '../../../../reducers';\nimport {\n  updateBlockData,\n  updateTemplate,\n  selectBlockById,\n} from '../../../../reducers/SiteReducer';\nimport type { RootState } from '../../../../reducers/store';\nimport { SettingBlockProps, StyleData } from '../../blockValidator';\n\nfunction Hero({ blockId, onRemove }: SettingBlockProps) {\n  const { id, template, data, isCardOpened } = useAppSelector(\n    (state: RootState) => selectBlockById(state, blockId)\n  );\n  let styleOptions = getStyleOptions(template);\n  let currentStyle = getCurrentStyleOption(template);\n  const dispatch = useAppDispatch();\n  const [navTitle, setNavTitle] = useState(data.navTitle);\n  const [caption, setCaption] = useState(data.caption?.value);\n  const [header, setHeader] = useState(data.header?.value);\n  const [body, setBody] = useState(data.body?.value);\n  const [button, setButton] = useState(data.button);\n  const [style, setStyle] = useState(currentStyle);\n  return (\n    <>\n      <Card\n        title=\"Hero\"\n        onRemove={onRemove}\n        icon={icon.Hero}\n        isCardOpened={isCardOpened}\n        pinned\n        blockId={blockId}\n      >\n        <TextInput\n          title=\"메뉴명\"\n          required={false}\n          value={navTitle}\n          onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n            setNavTitle(e.target.value);\n            dispatch(\n              updateBlockData({\n                blockId: id,\n                field: 'navTitle',\n                value: e.target.value,\n              })\n            );\n          }}\n          guideline=\"네비게이션 바에 입력될 메뉴명을 입력하세요.\"\n        ></TextInput>{' '}\n        <CustomSelect\n          title=\"스타일\"\n          required\n          guideline=\"스타일를 선택해주세요.\"\n          placeholder=\"원하는 선택지를 선택해주세요\"\n          options={styleOptions}\n          onChange={(e: StyleData) => {\n            setStyle(e);\n            dispatch(updateTemplate({ blockId: id, newTemplate: e.value }));\n          }}\n          value={style}\n        />\n        <TextInput\n          title=\"캡션\"\n          required={false}\n          onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n            setCaption(e.target.value);\n            dispatch(\n              updateBlockData({\n                blockId: id,\n                field: 'caption',\n                value: { value: e.target.value },\n              })\n            );\n          }}\n          guideline=\"캡션에 표시될 내용을 입력하세요.\"\n          value={caption}\n        ></TextInput>\n        <TextInput\n          title=\"헤드라인\"\n          required={false}\n          onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n            setHeader(e.target.value);\n            dispatch(\n              updateBlockData({\n                blockId: id,\n                field: 'header',\n                value: { value: e.target.value },\n              })\n            );\n          }}\n          guideline=\"캡션에 표시될 내용을 입력하세요.\"\n          value={header}\n        ></TextInput>\n        <TextInput\n          title=\"설명\"\n          required={false}\n          onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n            setBody(e.target.value);\n            dispatch(\n              updateBlockData({\n                blockId: id,\n                field: 'body',\n                value: { value: e.target.value },\n              })\n            );\n          }}\n          guideline=\"설명에 표시될 내용을 입력하세요\"\n          value={body}\n        ></TextInput>\n        <TextInput\n          title=\"버튼 텍스트\"\n          required={false}\n          guideline=\"비워둘 경우 버튼이 나타나지 않습니다.\"\n          value={button?.title}\n          onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n            setButton({ ...button, title: e.target.value });\n            dispatch(\n              updateBlockData({\n                blockId: id,\n                field: 'button',\n                value: { ...button, title: e.target.value },\n              })\n            );\n          }}\n        ></TextInput>\n        <TextInput\n          title=\"버튼 URL\"\n          required={false}\n          guideline=\"버튼 클릭시 이동될 url을 입력하세요\"\n          value={button?.url}\n          onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n            setButton({ ...button, url: e.target.value });\n            dispatch(\n              updateBlockData({\n                blockId: id,\n                field: 'button',\n                value: { title: button?.title, url: e.target.value },\n              })\n            );\n          }}\n        ></TextInput>\n      </Card>\n    </>\n  );\n}\nexport default Hero;\n","import styled, { css } from 'styled-components';\nimport * as icon from '../../icons';\nimport React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { toggleCardState } from '../../reducers/SiteReducer';\n\nexport const CardHeader = styled.div<{ isOpened: boolean }>`\n  background: #ffffff;\n  border: 1px solid #efefef;\n  border-radius: ${(props) =>\n    props.isOpened === true ? '12px 12px 0 0' : '12px'};\n  position: relative;\n  width: 100%;\n  height: 60px;\n  display: flex;\n  padding: 0px 24px;\n  box-sizing: border-box;\n  & * {\n    user-select: none;\n    user-drag: none;\n  }\n`;\n\nconst CardContainer = styled.div`\n  width: 100%;\n`;\n\nconst CardBoby = styled.div<{ isOpened: boolean }>`\n  background: #ffffff;\n  border: 1px solid #efefef;\n  border-top: none;\n  padding: 24px;\n  box-sizing: border-box;\n  border-radius: 0 0 12px 12px;\n  div:first-child {\n    margin-top: 0px;\n  }\n`;\n\nconst HeaderIcon = styled.img<{ pinned: boolean }>`\n  width: 22px;\n  height: 22px;\n  margin: auto 0;\n  &:hover {\n    cursor: ${(props) => (props.pinned ? 'not-allowed' : 'grab')};\n  }\n  &:active {\n    cursor: ${(props) => (props.pinned ? 'not-allowed' : 'grabbing')};\n  }\n`;\n\nconst TitleBox = styled.div`\n  font-weight: 600;\n  font-size: 18px;\n  display: flex;\n  margin-left: 20px;\n`;\n\nconst Title = styled.span`\n  margin: auto 0;\n  margin-left: 16px;\n  padding-top: 2px;\n`;\n\nconst TitleIcon = styled.img`\n  width: 24px;\n  height: 24px;\n  margin: auto 0;\n`;\nconst Trash = styled.img`\n  width: 20px;\n  height: 20px;\n  position: absolute;\n  padding: 10px;\n  right: 64px;\n  top: 9px;\n  transition: opacity 0.3s;\n  &:hover {\n    cursor: pointer;\n    opacity: 0.6;\n  }\n`;\nconst Down = styled.img<{ isOpened: boolean }>`\n  width: 20px;\n  height: 20px;\n  position: absolute;\n  padding: 10px;\n  right: 22px;\n  top: 9px;\n  transition: transform 0.4s;\n  &:hover {\n    cursor: pointer;\n  }\n  ${(props) =>\n    props.isOpened &&\n    css`\n      transform: rotate(180deg);\n    `}\n`;\n\ninterface Cardprops {\n  title: string;\n  children: any;\n  pinned?: boolean;\n  icon?: string;\n  onRemove: (event: React.MouseEvent<HTMLElement>) => void;\n  isCardOpened?: boolean;\n  blockId?: string;\n}\n\nexport const Card = (props: Cardprops) => {\n  const dispatch = useDispatch();\n  const isCardOpened = props.isCardOpened ?? false;\n  return (\n    <CardContainer>\n      <CardHeader isOpened={isCardOpened}>\n        <HeaderIcon\n          pinned={props.pinned ? true : false}\n          src={props.pinned ? icon.Pin : icon.Movable}\n          alt=''\n        />\n        <TitleBox>\n          <TitleIcon src={props.icon} alt='' />\n          <Title>{props.title}</Title>\n        </TitleBox>\n        <Trash src={icon.Trash} alt='' onClick={props.onRemove} />\n        <Down\n          src={icon.Down}\n          alt=''\n          isOpened={isCardOpened}\n          onClick={() => {\n            dispatch(toggleCardState(props.blockId ?? ''));\n          }}\n        />\n      </CardHeader>\n      {isCardOpened && (\n        <CardBoby isOpened={isCardOpened}>{props.children}</CardBoby>\n      )}\n    </CardContainer>\n  );\n};\n"],"names":["blockId","onRemove","useAppSelector","state","selectBlockById","id","template","data","isCardOpened","styleOptions","getStyleOptions","currentStyle","getCurrentStyleOption","dispatch","useAppDispatch","useState","navTitle","setNavTitle","caption","value","setCaption","header","setHeader","body","setBody","button","setButton","style","setStyle","title","icon","pinned","required","onChange","e","target","updateBlockData","field","guideline","placeholder","options","updateTemplate","newTemplate","url","CardHeader","styled","props","isOpened","CardContainer","CardBoby","HeaderIcon","TitleBox","Title","TitleIcon","Trash","Down","css","Card","useDispatch","src","alt","onClick","toggleCardState","children"],"sourceRoot":""}